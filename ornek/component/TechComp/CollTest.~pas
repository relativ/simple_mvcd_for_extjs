unit CollTest;

interface

uses
    Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls,
Forms,
    Dialogs;

type
    TMyComponent = class;

    TMyCollection = class(TOwnedCollection);

    TMyCollectionItem = class(TCollectionItem)
    private
      FStringProp: string;
    published
      property StringProp: string read FStringProp write FStringProp;
    end;

    TMyPersistent = class(TPersistent)
    private
      FCollection: TMyCollection;
      procedure SetCollection(const Value: TMyCollection);
    public
      constructor Create(AComponent: TComponent);
      destructor Destroy; override;
    published
      property Collection: TMyCollection read FCollection write
SetCollection;
    end;

    TMyComponent = class(TComponent)
    private
      FCollection: TMyCollection;
      FPersistent: TMyPersistent;
      procedure SetCollection(const Value: TMyCollection);
      procedure SetPersistent(const Value: TMyPersistent);
    public
      constructor Create(AOwner: TComponent); override;
      destructor Destroy; override;
    published
      property Collection: TMyCollection read FCollection write
SetCollection;
      property Persistent: TMyPersistent read FPersistent write
SetPersistent;
    end;

procedure Register;

implementation

{ TMyPersistent }

constructor TMyPersistent.Create(AComponent: TComponent);
begin
    inherited Create;
    // no one of variants work
    FCollection := TMyCollection.Create(Self, TMyCollectionItem);
//  FCollection := TMyCollection.Create(AComponent, TMyCollectionItem);
end;

destructor TMyPersistent.Destroy;
begin
    FreeAndNil(FCollection);
    inherited;
end;

procedure TMyPersistent.SetCollection(const Value: TMyCollection);
begin
  FCollection.Assign(Value);
end;


{ TMyComponent }

constructor TMyComponent.Create(AOwner: TComponent);
begin
    inherited;
    FCollection := TMyCollection.Create(Self, TMyCollectionItem);
    FPersistent := TMyPersistent.Create(Self);
end;

destructor TMyComponent.Destroy;
begin
    FreeAndNil(FCollection);
    FreeAndNil(FPersistent);
    inherited;
end;

procedure TMyComponent.SetCollection(const Value: TMyCollection);
begin
    FCollection.Assign(Value);
end;

procedure TMyComponent.SetPersistent(const Value: TMyPersistent);
begin
    FPersistent.Assign(Value);
end;

procedure Register;
begin
    RegisterComponents('Tech', [TMyComponent]);
end;  // proc

end.
