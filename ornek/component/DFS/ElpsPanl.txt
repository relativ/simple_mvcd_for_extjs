TdfsEllipsisPanel v1.19


Description:
 A panel that can shorten the caption text, replacing it with '...' when
 it does not fit the available space.  Also provided is a generic function
 that will "ellipsify" a string.  This function can be used to produce
 other components like TdfsEllipsisPanel, such as TdfsEllipsisLabel.
      
      
Contact Information:
  The lateset version will always be available on the web at:
    http://www.delphifreestuff.com
  If you have any questions, comments or suggestions, please use the Delphi
  Free Stuff Support Forum at: 
    http://www.delphifreestuff.com/discus/
  If, for some reason, you can not use the web-based support forum, you can
  email me at bstowers@delphifreestuff.com.  However, the support forum will
  always take precedence over direct email since it provides a resource that
  others can use when they have a problem.  Every message posted to the forum
  is emailed directly to this account, so emailing me directly will not get 
  your message to me any faster.  It will only make the message less important
  for me to respond to since only one person (you) is benefiting from it
  instead of everyone interested.  Having said all that, please do email me 
  directly if it is regarding something that isn't really support related, 
  i.e. just to say thanks (as novel as that idea is).  


Installation:
  Delphi 1:
    * Select the 'Options | Install Components' menu item.
    * In the Install Components dialog, click the Add button.
    * In the Add Module dialog, enter the full path name of the component's 
      registration unit (the unit that ends with 'Reg.pas', i.e. 
      'BrowseDrReg.pas') and click OK.
    * In the Add Module dialog, click OK.
    * The component library will be rebuilt and a new tab named 'DFS' will
      be available on the Component Palette.
  
  Delphi 2, C++Builder 1:
    * Select the 'Component | Install' menu item.
    * In the Install Components dialog, click the Add button.
    * In the Add Module dialog, enter the full path name of the component's 
      registration unit (the unit that ends with 'Reg.pas', i.e.
      'BrowseDrReg.pas') and click OK.
    * In the Add Module dialog, click OK.
    * The component library will be rebuilt and a new tab named 'DFS' will be 
      available on the Component Palette.

  Delphi 3, 4, 5, C++Builder 3 & 4:
    * Do one of the following:
      + Create a new package by selecting File | New and choosing Package from
        the New tab in the dialog.
      + Open an existing package file.  I suggest you do this if you already
        have a package that you like to use for small, third party components.
        I specifically have a package named "3rdParty.dpk" that I use for
        small components that come from other people.  Or, if you are using
        several of my components, you might create a "DFS.dpk" package and
        use it for all of my DFS components.
    * In the resulting package window, click the Add button.
    * In the Add dialog, on the Add Unit tab, enter the full path name of the
      component's registration unit (the unit that ends with 'Reg.pas', i.e.
      'BrowseDrReg.pas') and click OK.
    * You may want to add the other source files (*.pas) to the package as
      well in the same manner as you did the registration unit.  While this is
      not required, not doing it will cause compiler warnings when the package
      is compiled.  The component will function fine either way, but I
      personally find the warnings very irritating and am not happy until
      every compiler warning and hint is gone.
    * If this package is new, or it has never been installed, click the
      Install button in the package window.  If this package is already
      installed in Delphi, click the Compile button.

  C++Builder 5 and up:
    * Perform the "Delphi 3 and up, C++Builder 3 and up" steps above, except
      for the last step (Compile or Install).
    * Select the package the component has been added to, and choose 
      Project | Edit Option Source to open the package options in the editor.
    * In the entry for PFLAGS, add the "-LUvcl50" option.  For example:
        <PFLAGS value="-$YD -$W -$O -v -JPHNE -M -LUvcl50"/>
    * Perform the final step from above, Compile or Install.
    * For Borland's official word on this situation, open the C++Builder help
      file and search the index for "dsgnintf.dcu" and see the "Compiling
      packages with DsgnIntf" section.

  Delphi 6 and up:
    * Perform the "Delphi 3, 4, 5, C++Builder 3 & 4" steps above, except
      for the last step (Compile or Install).
    * Add the DesignIDE package to the Requires list of the package into which
      the component is being installed.
    * Perform the final step from above, Compile or Install.
    * This is necessary because of changes to the design-time support units
      introduced in Delphi 6.  For complete information, see the Del6New.hlp
      file in your Delphi 6 Help directory.  In the index, search for
      "upgrade issues" and in the resulting list of topics, select the
      "DsgnIntf renamed and related changes" topic.


Known Issues:
  * There are no known issues at this time.


Revision History:
 1.19:  + Updated for Delphi 6 compatibility.  See updated install directions
          above.
 1.18:  + Updated for C++Builder 5 compatibility.
 1.17:  + Didn't publish a lot of properties that were available to panels after
          Delphi 1.  For example, Constraints, Anchors, all the docking stuff in
          Delphi 4, etc.  This has been fixed.
 1.16:  + It's *really* D5 compatible now.  Small change between the D5 eval
          version and the real, shipping D5 version broke it.
 1.15:  + Component classname changed.
        + D5 compatibility.
 1.14:  + Added ElPnlReg unit.  All IDE specific code (i.e. registering the
          component, property editors, etc.) are contained in this unit.  This
          was done for two primary reasons:  1) Using the component in a Delphi
          or C++Builder expert would register the component as well.  2) Reduce
          code size in some cases -- usually the smart linker removes this sort
          of stuff since the app never references it, but now it's for certain
          since it isn't even in the unit.  This change means that you need to
          install the component using the new "registration" unit instead of
          the unit containing the component.
 1.13:  + Added Version property.
 1.12:  + EllipsifyText function now uses the DrawTextEx API function if running
          under Win32 (it's not available for Win16).  I thought I'd already
          done this, but I guess not.  Thanks to Dan Brooke
          <dan@health-intl.demon.co.uk> for this.
        + Was not accounting for the BorderWidth properly.
        + Updated to use DFS.INC for standard defines.
        + Fixed bug with C++Builder 3 run-time packages.
 1.11:  + '|' was not being added to the end of hint string if it was "full"
          that is it was a short string and already had 255 characters.
 1.10:  + More inTdfsElligent auto hint handling.
          Replaced the old AutoHint property with AutoHintOptions property.
        + Did not properly account for BorderWidth property. Fixed.
 1.00:  + Initial release

